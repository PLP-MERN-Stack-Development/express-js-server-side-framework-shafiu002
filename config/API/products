// GET all products
app.get('/api/products', async (req, res) => {
  const products = await Product.find();
  res.json(products);
});

// GET product by ID
app.get('/api/products/:id', async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    product ? res.json(product) : res.status(404).send('Product not found');
  } catch {
    res.status(400).send('Invalid ID');
  }
});

// POST new product
app.post('/api/products', async (req, res) => {
  const newProduct = new Product(req.body);
  await newProduct.save();
  res.status(201).json(newProduct);
});

// PUT update product
app.put('/api/products/:id', async (req, res) => {
  try {
    const updated = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    updated ? res.json(updated) : res.status(404).send('Product not found');
  } catch {
    res.status(400).send('Invalid ID');
  }
});

// DELETE product
app.delete('/api/products/:id', async (req, res) => {
  try {
    const deleted = await Product.findByIdAndDelete(req.params.id);
    deleted ? res.status(204).send() : res.status(404).send('Product not found');
  } catch {
    res.status(400).send('Invalid ID');
  }
});


app.get('/api/products', asyncHandler(async (req, res) => {
  const { category, page = 1, limit = 10 } = req.query;

  const filter = {};
  if (category) {
    filter.category = category;
  }

  const products = await Product.find(filter)
    .skip((page - 1) * limit)
    .limit(parseInt(limit));

  res.json(products);
}));
